/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 02:28:03 GMT 2024
 */

package com.example.evosuite.validador.segunda;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.Banco;
import com.example.Conta;
import com.example.Validador;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Validador_ESTest extends Validador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long((-1574L));
      // Undeclared exception!
      try { 
        Validador.geraNumeroConta("T#jJa){@", "Q*(A,", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Erro de Valida\u00E7\u00E3o: a senha deve conter apenas numeros
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Banco banco0 = new Banco(0L, (String) null);
      // Undeclared exception!
      try { 
        banco0.getConta(5, '1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Erro de Valida\u00E7\u00E3o: digito da conta n\u00E3o confere
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Validador.incremental = (-232);
      int int0 = Validador.getIdIncremental();
      assertEquals((-231), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char char0 = Validador.calculaDigitoVerificador((-1));
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        Validador.validarSaldoSuficiente((Conta) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.validaSenhaConta((Conta) null, "0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.validaIsContaAtiva((Conta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.validaCriacaoSenha((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        Validador.geraNumeroConta((String) null, (String) null, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.calculaDigitoVerificador(2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.validaCriacaoSenha("P^8,@AOEdtYz],");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Erro de Valida\u00E7\u00E3o: a senha deve conter apenas numeros
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Validador.validaDigitoVerificador(1, '2');
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.validaCriacaoSenha("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Erro de Valida\u00E7\u00E3o: a senha deve ter exatamente 6 numeros
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validador.validaDigitoVerificador(0, '1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Erro de Valida\u00E7\u00E3o: digito da conta n\u00E3o confere
         //
         verifyException("com.example.Validador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char char0 = Validador.calculaDigitoVerificador(2580);
      assertEquals('X', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char char0 = Validador.calculaDigitoVerificador((-18));
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Validador.getIdIncremental();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Validador validador0 = new Validador();
      assertEquals(0, Validador.incremental);
  }
}
